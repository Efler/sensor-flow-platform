services:

  # ----- zookeeper cluster (spark) -----

  zookeeper-spark-1:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-spark-1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVERS: zookeeper-spark-1:22888:23888;zookeeper-spark-2:22888:23888;zookeeper-spark-3:22888:23888
      KAFKA_OPTS: -Dzookeeper.4lw.commands.whitelist=*
    networks:
      - sensor-flow-platform-network

  zookeeper-spark-2:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-spark-2
    ports:
      - "2182:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVERS: zookeeper-spark-1:22888:23888;zookeeper-spark-2:22888:23888;zookeeper-spark-3:22888:23888
      KAFKA_OPTS: -Dzookeeper.4lw.commands.whitelist=*
    networks:
      - sensor-flow-platform-network

  zookeeper-spark-3:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-spark-3
    ports:
      - "2183:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVERS: zookeeper-spark-1:22888:23888;zookeeper-spark-2:22888:23888;zookeeper-spark-3:22888:23888
      KAFKA_OPTS: -Dzookeeper.4lw.commands.whitelist=*
    networks:
      - sensor-flow-platform-network


  # ----- spark cluster -----

  spark-master-1:
    image: bitnami/spark:3.5
    container_name: spark-master-1
    ports:
      - '7071:7077'
      - '8181:8080'
      - '5051:6066'
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark_master_1_user
      - SPARK_DAEMON_USER=root
      - SPARK_MASTER_HOST=spark-master-1
      - SPARK_MASTER_URL=spark://spark-master-1:7077
      - SPARK_DAEMON_JAVA_OPTS=-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=zookeeper-spark-1:2181,zookeeper-spark-2:2181,zookeeper-spark-3:2181 -Dspark.deploy.zookeeper.dir=/spark
    volumes:
      - ./spark-jobs/volume-jobs:/opt/spark-jobs
    networks:
      - sensor-flow-platform-network
    depends_on:
      - zookeeper-spark-1
      - zookeeper-spark-2
      - zookeeper-spark-3
      - minio-client
      - minio-proxy
#      - timescaledb
#      - liquibase-migrations

  spark-master-2:
    image: bitnami/spark:3.5
    container_name: spark-master-2
    ports:
      - '7072:7077'
      - '8182:8080'
      - '5052:6066'
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark_master_2_user
      - SPARK_DAEMON_USER=root
      - SPARK_MASTER_HOST=spark-master-2
      - SPARK_MASTER_URL=spark://spark-master-2:7077
      - SPARK_DAEMON_JAVA_OPTS=-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=zookeeper-spark-1:2181,zookeeper-spark-2:2181,zookeeper-spark-3:2181 -Dspark.deploy.zookeeper.dir=/spark
    volumes:
      - ./spark-jobs/volume-jobs:/opt/spark-jobs
    networks:
      - sensor-flow-platform-network
    depends_on:
      - zookeeper-spark-1
      - zookeeper-spark-2
      - zookeeper-spark-3
      - minio-client
      - minio-proxy
#      - timescaledb
#      - liquibase-migrations

  spark-worker-1:
    image: bitnami/spark:3.5
    container_name: spark-worker-1
    ports:
      - '8281:8081'
      - '4041:4040'
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master-1:7077,spark-master-2:7077
      - SPARK_WORKER_MEMORY=1g
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark_worker_1_user
      - SPARK_DAEMON_USER=root
    volumes:
      - ./spark-jobs/volume-jobs:/opt/spark-jobs
    networks:
      - sensor-flow-platform-network
    depends_on:
      - spark-master-1
      - spark-master-2

  spark-worker-2:
    image: bitnami/spark:3.5
    container_name: spark-worker-2
    ports:
      - '8282:8081'
      - '4042:4040'
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master-1:7077,spark-master-2:7077
      - SPARK_WORKER_MEMORY=1g
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark_worker_2_user
      - SPARK_DAEMON_USER=root
    volumes:
      - ./spark-jobs/volume-jobs:/opt/spark-jobs
    networks:
      - sensor-flow-platform-network
    depends_on:
      - spark-master-1
      - spark-master-2

  spark-worker-3:
    image: bitnami/spark:3.5
    container_name: spark-worker-3
    ports:
      - '8283:8081'
      - '4043:4040'
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master-1:7077,spark-master-2:7077
      - SPARK_WORKER_MEMORY=1g
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark_worker_3_user
      - SPARK_DAEMON_USER=root
    volumes:
      - ./spark-jobs/volume-jobs:/opt/spark-jobs
    networks:
      - sensor-flow-platform-network
    depends_on:
      - spark-master-1
      - spark-master-2


  # ----- minio cluster -----

  minio-1:
    image: minio/minio
    container_name: minio-1
    command: server --address ":9000" --console-address ":9001" http://minio-{1...4}/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9010:9000"
      - "9011:9001"
    volumes:
      - ./s3/minio-1:/data
    networks:
      - sensor-flow-platform-network

  minio-2:
    image: minio/minio
    container_name: minio-2
    command: server --address ":9000" --console-address ":9001" http://minio-{1...4}/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9020:9000"
      - "9021:9001"
    volumes:
      - ./s3/minio-2:/data
    networks:
      - sensor-flow-platform-network

  minio-3:
    image: minio/minio
    container_name: minio-3
    command: server --address ":9000" --console-address ":9001" http://minio-{1...4}/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9030:9000"
      - "9031:9001"
    volumes:
      - ./s3/minio-3:/data
    networks:
      - sensor-flow-platform-network

  minio-4:
    image: minio/minio
    container_name: minio-4
    command: server --address ":9000" --console-address ":9001" http://minio-{1...4}/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9040:9000"
      - "9041:9001"
    volumes:
      - ./s3/minio-4:/data
    networks:
      - sensor-flow-platform-network

  minio-client:
    image: bitnami/minio-client
    container_name: minio-client
    entrypoint: >
      /bin/sh -c "
      sleep 7;
      mc alias set myminio http://minio-1:9000 minioadmin minioadmin;
      mc mb myminio/spark-bucket;
      mc anonymous set public myminio/spark-bucket;
      exit 0;
      "
    networks:
      - sensor-flow-platform-network
    depends_on:
      - minio-1
      - minio-2
      - minio-3
      - minio-4

  minio-proxy:
    image: nginx:latest
    container_name: minio-proxy
    volumes:
      - ./minio-proxy-config/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9990:9990"
    networks:
      - sensor-flow-platform-network
    depends_on:
      - minio-1
      - minio-2
      - minio-3
      - minio-4


  # ----- zookeeper cluster (kafka) -----

  zookeeper-kafka-1:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-kafka-1
    ports:
      - "2281:2181"
    environment:
#      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_SERVERS: zookeeper-kafka-1:22888:23888;zookeeper-kafka-2:22888:23888;zookeeper-kafka-3:22888:23888
      KAFKA_OPTS: -Dzookeeper.4lw.commands.whitelist=*
    networks:
      - sensor-flow-platform-network

#  zookeeper-kafka-2:
#    image: confluentinc/cp-zookeeper:latest
#    container_name: zookeeper-kafka-2
#    ports:
#      - "2282:2181"
#    environment:
#      ZOOKEEPER_SERVER_ID: 2
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_SERVERS: zookeeper-kafka-1:22888:23888;zookeeper-kafka-2:22888:23888;zookeeper-kafka-3:22888:23888
#      KAFKA_OPTS: -Dzookeeper.4lw.commands.whitelist=*
#    networks:
#      - sensor-flow-platform-network
#
#  zookeeper-kafka-3:
#    image: confluentinc/cp-zookeeper:latest
#    container_name: zookeeper-kafka-3
#    ports:
#      - "2283:2181"
#    environment:
#      ZOOKEEPER_SERVER_ID: 3
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_SERVERS: zookeeper-kafka-1:22888:23888;zookeeper-kafka-2:22888:23888;zookeeper-kafka-3:22888:23888
#      KAFKA_OPTS: -Dzookeeper.4lw.commands.whitelist=*
#    networks:
#      - sensor-flow-platform-network


  # ----- kafka cluster -----

  kafka-broker-1:
    image: bitnami/kafka:latest
    container_name: kafka-broker-1
    ports:
      - "9192:9192"
      - "9193:9193"
    environment:
#      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-kafka-1:2181,zookeeper-kafka-2:2181,zookeeper-kafka-3:2181
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-kafka-1:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9192,EXTERNAL://:9193
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka-broker-1:9192,EXTERNAL://localhost:9193
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    networks:
      - sensor-flow-platform-network
    depends_on:
      - zookeeper-kafka-1
#      - zookeeper-kafka-2
#      - zookeeper-kafka-3

  kafka-broker-2:
    image: bitnami/kafka:latest
    container_name: kafka-broker-2
    ports:
      - "9292:9292"
      - "9293:9293"
    environment:
#      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-kafka-1:2181,zookeeper-kafka-2:2181,zookeeper-kafka-3:2181
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-kafka-1:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9292,EXTERNAL://:9293
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka-broker-2:9292,EXTERNAL://localhost:9293
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    networks:
      - sensor-flow-platform-network
    depends_on:
      - zookeeper-kafka-1
#      - zookeeper-kafka-2
#      - zookeeper-kafka-3

  kafka-broker-3:
    image: bitnami/kafka:latest
    container_name: kafka-broker-3
    ports:
      - "9392:9392"
      - "9393:9393"
    environment:
#      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-kafka-1:2181,zookeeper-kafka-2:2181,zookeeper-kafka-3:2181
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-kafka-1:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9392,EXTERNAL://:9393
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka-broker-3:9392,EXTERNAL://localhost:9393
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    networks:
      - sensor-flow-platform-network
    depends_on:
      - zookeeper-kafka-1
#      - zookeeper-kafka-2
#      - zookeeper-kafka-3

  kafka-init-topics:
    image: bitnami/kafka:latest
    container_name: kafka-init-topics
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      echo 'sleeping (10s) ...'
      sleep 10
      /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka-broker-1:9192 --list
      echo 'Creating kafka topics'
      /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka-broker-1:9192 --create --if-not-exists --topic sensors-data --replication-factor 3 --partitions 3
      echo 'Successfully created the following topics:'
      /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka-broker-1:9192 --list
      exit 0
      "
    networks:
      - sensor-flow-platform-network
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3


  # ----- timescaledb -----

#  timescaledb:
#    image: timescale/timescaledb:latest-pg16
#    container_name: timescaledb
#    ports:
#      - "5432:5432"
#    environment:
#      POSTGRES_USER: admin
#      POSTGRES_PASSWORD: password
#      POSTGRES_DB: sensor_flow_platform
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U admin -d sensor_flow_platform" ]
#      interval: 3s
#      timeout: 3s
#      retries: 3
#    networks:
#      - sensor-flow-platform-network
#
#  liquibase-migrations:
#    image: liquibase/liquibase:latest
#    command:
#      - --changeLogFile=changelog-master.xml
#      - --searchPath=/liquibase/changelog
#      - --driver=org.postgresql.Driver
#      - --url=jdbc:postgresql://timescaledb:5432/sensor_flow_platform
#      - --username=admin
#      - --password=password
#      - update
#    volumes:
#      - ./migrations:/liquibase/changelog
#    networks:
#      - sensor-flow-platform-network
#    depends_on:
#      timescaledb:
#        condition: service_healthy

#  grafana:
#    image: grafana/grafana:latest
#    container_name: grafana
#    user: "0"
#    ports:
#      - "3000:3000"
#    volumes:
#      - ./grafana-data:/var/lib/grafana
#    networks:
#      - sensor-flow-platform-network
#    depends_on:
#      - liquibase-migrations

  # ----- device -----

#  device:
#    image: device:latest
#    container_name: device
#    environment:
#      KAFKA_BOOTSTRAP_SERVERS: "kafka-broker-1:9192,kafka-broker-2:9292,kafka-broker-3:9392"
#    entrypoint: ["/bin/sh", "-c", "echo 'Initial delay, waiting 15s...'; sleep 15; exec java -jar device-fat.jar"]
#    networks:
#      - sensor-flow-platform-network
#    depends_on:
#      - kafka-broker-1
#      - kafka-broker-2
#      - kafka-broker-3
#      - kafka-init-topics

networks:
  sensor-flow-platform-network:
    name: sensor-flow-platform-network
